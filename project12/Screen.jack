// This file is part of the materials accompanying the book
// "The Elements of Computing Systems" by Nisan and Schocken,
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
  static int height;
  static int width;
  static int min_addr, max_addr;
  static boolean color; //white = false black = true
static Array bin;
  /** Initializes the Screen. */
  function void init() {
    var int i, elem;

    let height = 256;
    let width = 512;

    let min_addr = 16384;
    let max_addr = 24575;

    let color = true;

    let bin = Array.new(16);
    let i = 0;
    let elem = 1;

    while (i < 16)
    {
      let bin[i] = elem;
      let elem = elem + elem;
      let i = i + 1;
    }

    return;
  }

/** Erases the whole screen. */
function void clearScreen() {
  var int i,j;
  let i=min_addr;
  let j=0;

  if (color)
  {
    let color = false;
    while (max_addr > i)
    {
      do Memory.poke(i,0);
    }

    let color = true;
  }

 else
  {
    while (max_addr > i)
    {
      do Memory.poke(i,0);
    }
  }

  return;
}

/** Sets the color to be used in further draw commands
*  where white = false, black = true. */
function void setColor(boolean b) {
  let color = b;
  return;
}

/** mod (a,b) = a mod b */
function int mod (int a, int b)
{
  var int r,div,mult;
  let div = a/b;
  let mult = b*div;
  let r = a - mult;

  return r;
}

function int pixelValue(int x)
{
  var int p,val;
  let p = 16384;
  let val = 0;

  while (x > 0)
  {
    do Output.printInt(p);
    do Output.println();
    //let val = val + p;
    let p = p/2;
    let x = x - 1;

  }
  return p;
}

/** Draws the (x, y) pixel. */
function void drawPixel(int x, int y) {
  var int ram,cell,index,pixel;
  let index = x/16;
  let ram = index + min_addr + (y*32);
  let cell = Screen.mod(index,16);

  if ((x<0) | (x>512) | (y<0) | (y>256))
  {
    do Sys.error(7);
  }

  else
  {
    let pixel = Memory.peek(ram);
    if (color)
    {
      let pixel = bin[cell] | pixel;
    }
    else
    {
      let pixel =(~bin[cell]) & pixel;
    }

    do Memory.poke(ram,pixel);
  }
  return;
}

/** Draws a line from pixel (x1, y1) to (x2, y2). */
function void drawLine(int x1, int y1, int x2, int y2)
{
  var int a,b;
  var int dx,dy;
  var int ady, bdx;

  let a = 0;
  let b = 0;
  let dx = Math.abs(x2-x1);
  let dy = Math.abs(y2-y1);

  let ady = 0;
  let bdx = 0;

  while (~(a>dx) & ~(b>dy))
  {
    do Output.printString("wejrqwje");
    do Screen.drawPixel(x1+a, y1+b);
    let ady = a * dy;
    let bdx = b * dx;
    if (ady < bdx)
    {
      let a = a+1;
    }

    else
    {
      let b = b+1;
    }
  }

  return;
}

    /** Draws a filled rectangle where the top left corner is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
      return;
    }
}
